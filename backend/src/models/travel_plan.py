"""
TravelPlan model
"""

from __future__ import annotations

import uuid

from sqlalchemy import (
    Column,
    String,
    Date,
    Integer,
    ForeignKey,
    DateTime,
    Numeric,
    Index,
    CheckConstraint,
)
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

from ..config.database import Base


class TravelPlan(Base):
    """Travel plan generated by AI"""

    __tablename__ = "travel_plans"
    __table_args__ = (
        CheckConstraint("end_date >= start_date", name="ck_travel_plan_date_range"),
        CheckConstraint("total_days > 0", name="ck_travel_plan_total_days"),
        CheckConstraint("total_nights >= 0", name="ck_travel_plan_total_nights"),
        CheckConstraint("budget_total > 0", name="ck_travel_plan_budget_total"),
        CheckConstraint("traveler_count >= 1", name="ck_travel_plan_traveler_count"),
        Index("ix_travel_plans_user_id", "user_id"),
        Index("ix_travel_plans_destination", "destination"),
        Index("ix_travel_plans_created_at", "created_at"),
    )

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    user_id = Column(UUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    title = Column(String(200), nullable=False)
    destination = Column(String(100), nullable=False)
    country = Column(String(100), nullable=False)
    start_date = Column(Date, nullable=False)
    end_date = Column(Date, nullable=False)
    total_days = Column(Integer, nullable=False)
    total_nights = Column(Integer, nullable=False)
    budget_total = Column(Integer, nullable=False)
    budget_allocated = Column(Integer, nullable=True)
    budget_breakdown = Column(JSONB, nullable=True)
    traveler_type = Column(String(50), nullable=False)
    traveler_count = Column(Integer, nullable=False, default=1, server_default="1")
    preferences = Column(JSONB, nullable=False)
    status = Column(String(50), nullable=False, default="draft", server_default="draft")
    ai_model_version = Column(String(50), nullable=True)
    generation_time_seconds = Column(Numeric(5, 2), nullable=True)
    created_at = Column(
        DateTime(timezone=True), server_default=func.now(), nullable=False, index=True
    )
    updated_at = Column(
        DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False
    )

    # Relationships
    user = relationship("User", back_populates="travel_plans")
    daily_itineraries = relationship(
        "DailyItinerary",
        back_populates="travel_plan",
        cascade="all, delete-orphan",
        lazy="selectin",
    )
    flight_options = relationship(
        "FlightOption",
        back_populates="travel_plan",
        cascade="all, delete-orphan",
        lazy="selectin",
    )
    accommodation_options = relationship(
        "AccommodationOption",
        back_populates="travel_plan",
        cascade="all, delete-orphan",
        lazy="selectin",
    )
    def __repr__(self) -> str:
        return f"<TravelPlan {self.destination} {self.start_date}~{self.end_date}>"
